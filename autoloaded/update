#!/usr/bin/env bash

success() {
  printf "\\r[ ${GREEN}\\u2713${RESET} ] %s\\n" "${@}"
}

error() {
  printf "\\r[ ${RED}\\u274C${RESET} ] %s\\n" "${@}"
}

in_progress() {
  printf "${YELLOW}Starting${RESET} %s\\n" "${@}"
}

info() {
	printf "\033[1m\033[34m==> %s \033\\n\\n[0m\\n" "${@}"
}

exec_routine() {
  in_progress "${1}"

  start_time=$(date +%s)

  if $1; then
    end_time=$(date +%s)
    total_time="$(( end_time - start_time ))"
    success "${1} in ${total_time} seconds"
  else
    error "${1}"
  fi
}

brew_update() {
  brew update;
  brew upgrade --display-times;
  brew outdated --cask;
  brew upgrade --cask;
  brew autoremove;
  brew cleanup -s --prune 7;
}

conda_update() {
  conda update conda --name base --yes --verbose;
  conda update --all --name base --yes --verbose;
  conda clean --all --yes;
}

zplug_update() {
  zplug update;
  zplug clear;
}

npm_update() {
  npm install npm@latest --location=global;
  npm update --location=global;
}

gem_update() {
  sudo gem update --system;
  sudo gem update;
  sudo gem cleanup;
}

macos_update() {
  sudo softwareupdate -i -a --restart;
}

neovim_plug_update() {
  # Check if the directory exists
  if [[ -d "$HOME/.fzf/" ]]; then
    (cd $HOME/.fzf && git pull && ./install --bin)
  fi
  nvim --headless "+Lazy! sync" +TSUpdateSync +qa;
  nvim --headless foo "+MasonUpdate" +qa;
}

mas_update() {
  mas outdated;
  mas upgrade;
}

apt_update() {
  sudo apt update --yes;
  sudo apt upgrade --yes;
}

misc() {
  if [ $commands[battery] ]; then
    battery update;
  fi
}

run(){
  if ping -c 1 google.com &> /dev/null; then
    info "Checking for updates"

    sudo -v
    # Keep-alive: update existing `sudo` time stamp until script has finished
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

    [ $commands[conda] ] && exec_routine conda_update
    [ $commands[nvim] ] && exec_routine neovim_plug_update
    [ $commands[zplug] ] && exec_routine zplug_update
    [ $commands[npm] ] && exec_routine npm_update
    [ $commands[gem] ] && exec_routine gem_update
    [ $commands[mas] ] && exec_routine mas_update
    [ $commands[brew] ] && exec_routine brew_update
    exec_routine misc
    [ "$OSTYPE" = "Darwin" ] && exec_routine macos_update
    [ "$OSTYPE" = "Linux" ] && exec_routine apt_update
    success "Updates completed"
  else
    error "No internet access"
  fi
}
run;
